== WAAT

/**
 * Created by: Anand Bagmar
 * Email: abagmar@gmail.com
 *
 * Copyright 2010 Anand Bagmar.  Distributed under the Apache 2.0 License
 *
 * See LICENSE.txt for further details.
**/


== What is Web Analytics

Web Analytics is the measurement, collection, analysis and reporting of internet data for purposes of understanding and optimizing web usage. Web Analytics is not just a tool for measuring website traffic, but can also be used as a tool for business research and market research.
Web Analytics applications can also help companies measure the results of traditional print advertising campaigns. It helps one to estimate how the traffic to the web site changed after the launch of a new advertising campaign.

Web Analytics provides data on the number of visitors, page views, etc. to gauge the traffic popularity trends which helps doing the market research.
Official definition of Web Analytics from Wikipedia (http://en.wikipedia.org/wiki/Web_analytics)

== What is WAAT?

<b>{WAAT = Web Analytics Automation Testing.}[http://essenceoftesting.blogspot.com/search/label/waat]</b>

<b>See the {WAAT-Java wiki}[http://github.com/anandbagmar/WAAT/wiki] for answers to questions like what, why, how, and more.</b>

For any other questions, comments, help, email <b>Anand Bagmar @ abagmar@gmail.com</b>

== Setup instructions for running tests using Appium

<b>Appium setup for Android- in OS X</b>

* Brew: 
  * ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
2. JAVA JDK - http://www.oracle.com/technetwork/java/javase/downloads/index.html
3. Android SDK - https://developer.android.com/sdk/index.html [Note: Appium supports Android API >=17]
4. Set ANDROID_HOME and JAVA_HOME
  * Open Terminal and Navigate to Home Directory.
  * Execute command touch .bash_profile
  * Execute command open -e .bash_profile and set the path a shown in image below( Change the path to the android sdk downloaded)
  * Save the file and Execute "set" in your terminal and restart your terminal for the changes to reflect.
5. Node.js and Appium:
  * brew install node    # get node.js
  * npm install -g appium     # get appium
  * npm install wd    # get appium client
  * appium-doctor     # check if everything is correctly set
6. Appium.app (for Appium Inspector) - https://bitbucket.org/appium/appium.app/downloads/
7. Any IDE: Eclipse - https://www.eclipse.org/downloads/

<b>Appium setup for Android- in Windows</b>
## Prerequisites:
1. JAVA JDK - http://www.oracle.com/technetwork/java/javase/downloads/index.html
  * Set environment variable JAVA_HOME under 'System variables'.
2. Android SDK - https://developer.android.com/sdk/index.html [Note: Appium supports Android API >=17]
  * Set environment variable ANDROID_HOME under 'System variables'.
3. Node.js - https://nodejs.org/en/download/. Then run following commands on cmd:
    * npm install -g appium    # get appium
    * npm install wd    # get appium client
    * appium-doctor    # check if everything is correctly set
4. Appium.exe (zip file) (for Appium Inspector) - https://bitbucket.org/appium/appium.app/downloads/
5. Apache Maven (zip file) - https://maven.apache.org/download.cgi - Set environment variable M2_HOME under 'System variables'.
6. Any IDE: Eclipse - https://www.eclipse.org/downloads/
7. Add all the environment variables set(in steps 1,2 and 5) along with platform-tools and npm(node package manager)path to the PATH variable: 

So, your PATH variable would look something like:
C:\Windows\System32;%JAVA_HOME%\bin;%ANDROID_HOME%\bin;%M2_HOME%\bin;C:\Users\Administrator\AppData\Local\Android\android-sdk\platform-tools;C:\Program Files\nodejs\node_modules\npm\bin;

* Proxy setup for Android device:
1. Click Settings.
2. In Settings, click Wi-Fi.
3. Click and hold WiredSSID until a box pops up.
4. Click on "Modify network".
5. Check the "Show advanced options" box and select Manual from the Proxy Settings menu.
6. Enter your host machine's IP address in the "Proxy hostname" field, and 5555 in the "proxy port" field and enter the URL to be bypassed.
7. Then click Save.

== Latest version

* <b>WAAT-Java v1.5.0 is available from the {WAAT-Java dist}[http://github.com/anandbagmar/WAAT/tree/master/dist] folder.</b>
* <b>WAAT-Ruby v1.4.1 gem is available from http://rubygems.org</b>
* <b>WAAT-Ruby v1.5.0 gem is available from https://github.com/anandbagmar/WAAT-ruby/downloads</b>

== Platforms supported

* <b>{WAAT}[http://github.com/anandbagmar/WAAT] for Java</b>.
* <b>{WAAT}[http://github.com/anandbagmar/WAAT-Ruby] for Ruby</b>. The Ruby gem uses RJB (Ruby-Java-Bridge) to invoke APIs defined by WAAT-Java to enable Web Analytics Testing.
* See <b><em>{my blog}[http://essenceoftesting.blogspot.com/search/label/waat] for all activity around WAAT</em></b>.

== New changes coming in WAAT

* <b>HTTPSniffer & JSSniffer will NOT be supported in the new WAAT</b>
* A new plugin, based on <b>proxy server approach</b> will be available
* See the <b>{Issues}[https://github.com/anandbagmar/WAAT/issues]</b> in {WAAT github}[https://github.com/anandbagmar/WAAT] repo or <b><em>{my blog}[http://essenceoftesting.blogspot.com/search/label/waat] for upcoming changes to WAAT</em></b>.

=== Contributing
* Fork it!
* Create your feature branch: git checkout -b my-new-feature
* Commit your changes: git commit -am 'Add some feature'
* Push to the branch: git push origin my-new-feature
* Submit a pull request :D

== How to use WAAT-Ruby?

See the {HttpSniffer}[https://github.com/anandbagmar/WAAT/wiki/WAAT-using-HttpSniffer] or {JSSniffer}[https://github.com/anandbagmar/WAAT/wiki/WAAT-using-JSSniffer] wiki page for step-by-step instructions on how to use WAAT-Ruby in your project.


== Changes in v1.5.1

* Engine.isExpectedTagPresentInActualTagList in engine class is made public
* Updated Engine to work without creating testData.xml file, and directly sending exceptedSectionList for tags
    Added a new method
        Engine.verifyWebAnalyticsData(String actionName, ArrayList<Section> expectedSectionList, String[] urlPatterns, int minimumNumberOfPackets)
* Added an empty constructor for Section.java to prevent marshalling error
* Support Fragmented Packets
* Updated Engine to support Pattern comparison, instead of String contains


== Changes in v1.5.0

Some APIs have changed between v1.4.0 and v1.5.0.

* **To use JsSniffer plugin**:

    - Set the WebAnalytic Tool:
        WebAnalyticTool webAnalyticTool = WebAnalyticTool.JS_SNIFFER;
    -
    - Initialize the WAAT engine using this:
        engine = getInstance(webAnalyticTool, inputFileType, keepLoadedFileInMemory, log4jPropertiesAbsoluteFilePath);

* If you are using the JsSniffer plugin:

    You do not need to call the following methods :
    -
    engine.enableWebAnalyticsTesting();
    -
    engine.disableWebAnalyticsTesting();

* The method engine.verifyWebAnalyticsData takes in different parameters for {JSSniffer}[https://github.com/anandbagmar/WAAT/wiki/WAAT-using-JSSniffer] Vs {HttpSniffer}[https://github.com/anandbagmar/WAAT/wiki/WAAT-using-HttpSniffer]. Look at the respective wiki pages for detail info on how to use the same.

